using System;

public class Game
{
    private int _consecutiveVictories = 0;
    private readonly Random _random = new();

    public void Start()
    {
        while (true)
        {
            Console.WriteLine("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å:");
            Console.WriteLine("1 - –í–æ–∏–Ω");
            Console.WriteLine("2 - –í–∞—Ä–≤–∞—Ä");
            Console.WriteLine("3 - –†–∞–∑–±–æ–π–Ω–∏–∫");
            string input = Console.ReadLine();

            string initialClass = input switch
            {
                "1" => "–í–æ–∏–Ω",
                "2" => "–í–∞—Ä–≤–∞—Ä",
                "3" => "–†–∞–∑–±–æ–π–Ω–∏–∫",
                _ => "–í–æ–∏–Ω"
            };

            var player = new Player(initialClass);
            Console.WriteLine("–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ");
            Console.WriteLine("–ª–æ–≤–∫–æ—Å—Ç—å: " + player.Agility.ToString() +
            "\n –ó–¥–æ—Ä–æ–≤—å–µ: " + player.MaxHp.ToString() +
            "\n–≤—ã–Ω–æ—Å–ª–∏–æ—Å—Ç—å: " + player.Stamina.ToString() + '\n');
            _consecutiveVictories = 0;

            while (_consecutiveVictories < 5 && player.IsAlive())
            {
                var enemy = GenerateRandomEnemy();
                Console.WriteLine($"\n–í—ã –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ: {enemy.GetType().Name} (HP: {enemy.MaxHp})");

                var battle = new Battle(player, enemy);
                bool won = battle.Fight();

                if (won)
                {
                    _consecutiveVictories++;
                    Console.WriteLine($"–ü–æ–±–µ–¥–∞! –ü–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥: {_consecutiveVictories}");

                    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP
                    player.HealFull();

                    // –ù–∞–≥—Ä–∞–¥–∞: –æ—Ä—É–∂–∏–µ
                    Weapon reward = enemy.GetRewardWeapon();
                    Console.WriteLine($"–ò–∑ –º–æ–Ω—Å—Ç—Ä–∞ –≤—ã–ø–∞–ª–æ: {reward.Name} ({reward.Damage} —É—Ä–æ–Ω–∞, {reward.DamageType})");
                    Console.WriteLine($"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ: {player.Weapon.Name} ({player.Weapon.Damage} —É—Ä–æ–Ω–∞)");

                    Console.WriteLine("–•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ? (y/n)");
                    if (Console.ReadLine()?.ToLower() == "y")
                    {
                        player.Weapon = reward;
                        Console.WriteLine("–û—Ä—É–∂–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ!");
                    }

                    // –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ –º–æ–∂–Ω–æ)
                    if (player.CanLevelUp())
                    {
                        Console.WriteLine("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏:");
                        Console.WriteLine("1 - –í–æ–∏–Ω");
                        Console.WriteLine("2 - –í–∞—Ä–≤–∞—Ä");
                        Console.WriteLine("3 - –†–∞–∑–±–æ–π–Ω–∏–∫");
                        string lvlInput = Console.ReadLine();

                        string lvlClass = lvlInput switch
                        {
                            "1" => "–í–æ–∏–Ω",
                            "2" => "–í–∞—Ä–≤–∞—Ä",
                            "3" => "–†–∞–∑–±–æ–π–Ω–∏–∫",
                            _ => "–í–æ–∏–Ω"
                        };

                        player.LevelUp(lvlClass);
                        Console.WriteLine($"–í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –≤ –∫–ª–∞—Å—Å–µ: {lvlClass}");
                        player.PrintPlayerInfo();
                    }
                }
                else
                {
                    Console.WriteLine("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.");
                    break;
                }
            }

            if (_consecutiveVictories >= 5)
            {
                Console.WriteLine("\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ 5 –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥. –ò–≥—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!");
                break;
            }
        }
    }

    private Enemy GenerateRandomEnemy()
    {
        return _random.Next(0, 6) switch
        {
            0 => new Goblin(),
            1 => new Skeleton(),
            2 => new Slime(),
            3 => new Ghost(),
            4 => new Golem(),
            _ => new Dragon()
        };
    }
}